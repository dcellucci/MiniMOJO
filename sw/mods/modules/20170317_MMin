{"modules":{"0.038164121193438594":{"definition":"// MOJO Motor Control\n//\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {\n   motorvals: [0,0,0,0,0],\n   motordisp: [0,0,0,0,0],\n   trimvals: [5,-15,10,-10,-15],\n   liveupdate: false,\n   toppow: false, \n   botpow: false,\n   sync: false,\n   state: {},\n   pos:{\n      or:[0,0], //outer retracted\n      oe:[0,0], //outer extended\n      mr:[0,0], //mid retracted\n      me:[0,0], //mid extended\n      ir:[0,0], //inner retracted\n      ie:[0,0]  //inner extended\n   }\n}\n\n\n\n//\n// name\n//\nvar name = 'MOJO Motor Control'\n//\n// initialization\n//\nvar init = function() {   \n    \n    }\n    \n//\n// inputs\n//\nvar inputs = {\n   motorVals:{\n      type:'MOJOState',\n      event:function(evt){\n         var input = JSON.parse(evt.detail)\n         for(var i = 0; i < 5; i++){\n            if(parseInt(input.motorvals[i]) >= 0){\n               mod.motorvals[i].value = parseInt(input.motorvals[i])\n               mod.motordisp[i].value = parseInt(input.motorvals[i])\n               }\n            }\n         outputs.output.event()\n         }\n      }\n   }\n//\n// outputs\n//\nvar outputs = {\n   output:{type:'string',\n      event:function(){\n          mod.state.power = [mod.toppow,mod.botpow]\n          mod.state.sync = mod.sync\n        parseMotVals()\n         mods.output(mod,'output',JSON.stringify(mod.state)+\";\")\n      }\n   }\n}\n//\n// interface\n//\n\n\nvar interface = function(div){\n   mod.div = div///*\n   var openspan = document.createElement('span')\n      openspan.innerHTML = 'open'\n      openspan.style.fontWeight = 'normal'\n      openspan.addEventListener('mouseover', function(event){\n         openspan.style.fontWeight = 'bold'})\n      openspan.addEventListener('mouseout', function(event){\n         openspan.style.fontWeight = 'normal'})\n      openspan.addEventListener('mousedown', openMOJO)\n   div.appendChild(openspan)\n   var closespan = document.createElement('span')\n      closespan.innerHTML = ' close'\n      closespan.style.fontWeight = 'normal'\n      closespan.addEventListener('mouseover', function(event){\n         closespan.style.fontWeight = 'bold'})\n      closespan.addEventListener('mouseout', function(event){\n         closespan.style.fontWeight = 'normal'})\n      closespan.addEventListener('mousedown', closeMOJO)\n   div.appendChild(closespan)\n   \n   div.appendChild(document.createElement('br'))\n    div.appendChild(document.createTextNode('Auto-Sync'))\n\n    inputckbox = document.createElement('input')\n        inputckbox.type = 'checkbox'\n        inputckbox.checked = mod.liveupdate\n        inputckbox.addEventListener('change', function(){\n            mod.liveupdate = inputckbox.checked\n            })\n    div.appendChild(inputckbox)\n   div.appendChild(document.createElement('br'))\n//*/\n    console.log(mod.motorsliders)\n    \n    div.appendChild(document.createTextNode('Motor 1: '))\n    inputslider1 = document.createElement('input')\n        inputslider1.type = 'range'\n        inputslider1.min = 0\n        inputslider1.max = 255\n        inputslider1.step = 5\n    div.appendChild(inputslider1)\n    \n    input1 = document.createElement('input')\n        input1.type = 'text'\n        input1.value = inputslider1.value\n        input1.size = 1\n    div.appendChild(input1)\n    \n    trim1 = document.createElement('input')\n        trim1.type = 'text'\n        trim1.value = mod.trimvals[0]\n        trim1.size = 1\n    div.appendChild(trim1)\n        \n    mod.motorvals[0] = inputslider1\n    mod.motordisp[0] = input1\n    mod.trimvals[0] = trim1\n    \n    input1.addEventListener('change', function(){\n        inputslider1.value = input1.value\n        if(mod.liveupdate){\n            outputs.output.event()\n            }\n        })\n    inputslider1.addEventListener('input', function(){\n           input1.value = inputslider1.value  \n           if(mod.liveupdate){\n            outputs.output.event()\n            }\n            })\n    div.appendChild(document.createElement('br'))\n\n\n    div.appendChild(document.createTextNode('Motor 2: '))\n    inputslider2 = document.createElement('input')\n        inputslider2.type = 'range'\n        inputslider2.min = 0\n        inputslider2.max = 255\n        inputslider2.step = 5\n    div.appendChild(inputslider2)\n    \n    input2 = document.createElement('input')\n        input2.type = 'text'\n        input2.value = inputslider2.value\n        input2.size = 1\n    div.appendChild(input2)\n    \n    trim2 = document.createElement('input')\n        trim2.type = 'text'\n        trim2.value = mod.trimvals[1]\n        trim2.size = 1\n    div.appendChild(trim2)\n    \n    mod.motorvals[1] = inputslider2\n    mod.motordisp[1] = input2\n    mod.trimvals[1] = trim2\n    \n    input2.addEventListener('change', function(){\n        inputslider2.value = input2.value\n        if(mod.liveupdate){\n            outputs.output.event()\n            }\n        })\n        \n    inputslider2.addEventListener('input', function(){\n           input2.value = inputslider2.value\n           if(mod.liveupdate){\n            outputs.output.event()\n            }\n            })\n            \n    div.appendChild(document.createElement('br'))\n    \n    \n    div.appendChild(document.createTextNode('Motor 3: '))\n    inputslider3 = document.createElement('input')\n        inputslider3.type = 'range'\n        inputslider3.min = 0\n        inputslider3.max = 255\n        inputslider3.step = 5\n    div.appendChild(inputslider3)\n    \n    input3 = document.createElement('input')\n        input3.type = 'text'\n        input3.value = inputslider3.value\n        input3.size = 1\n    div.appendChild(input3)\n    \n    trim3 = document.createElement('input')\n        trim3.type = 'text'\n        trim3.value = mod.trimvals[2]\n        trim3.size = 1\n    div.appendChild(trim3)\n    \n    mod.motorvals[2] = inputslider3\n    mod.motordisp[2] = input3\n    mod.trimvals[2] = trim3\n    \n    input3.addEventListener('change', function(){\n        inputslider3.value = input3.value\n        if(mod.liveupdate){\n            outputs.output.event()\n            }\n        })\n    inputslider3.addEventListener('input', function(){\n           input3.value = inputslider3.value \n           if(mod.liveupdate){\n            outputs.output.event()\n            }\n            })\n\n    div.appendChild(document.createElement('br'))\n    \n    \n    div.appendChild(document.createTextNode('Motor 4: '))\n    inputslider4 = document.createElement('input')\n        inputslider4.type = 'range'\n        inputslider4.min = 0\n        inputslider4.max = 255\n        inputslider4.step = 5\n    div.appendChild(inputslider4)\n    \n    input4 = document.createElement('input')\n        input4.type = 'text'\n        input4.value = inputslider4.value\n        input4.size = 1\n    div.appendChild(input4)\n    \n    trim4 = document.createElement('input')\n        trim4.type = 'text'\n        trim4.value = mod.trimvals[3]\n        trim4.size = 1\n    div.appendChild(trim4)\n        \n    mod.motorvals[3] = inputslider4\n    mod.motordisp[3] = input4\n    mod.trimvals[3] = trim4\n    \n    input4.addEventListener('change', function(){\n        inputslider4.value = input4.value\n        if(mod.liveupdate){\n            outputs.output.event()\n            }\n        })\n    inputslider4.addEventListener('input', function(){\n           input4.value = inputslider4.value \n           if(mod.liveupdate){\n            outputs.output.event()\n            }\n            })\n\n    div.appendChild(document.createElement('br'))\n    \n    div.appendChild(document.createTextNode('Hip Motor: '))\n    inputslider5 = document.createElement('input')\n        inputslider5.type = 'range'\n        inputslider5.min = 0\n        inputslider5.max = 255\n        inputslider5.step = 5\n    div.appendChild(inputslider5)\n    \n    input5 = document.createElement('input')\n        input5.type = 'text'\n        input5.value = inputslider5.value\n        input5.size = 1\n    div.appendChild(input5)\n    \n    trim5 = document.createElement('input')\n        trim5.type = 'text'\n        trim5.value = mod.trimvals[4]\n        trim5.size = 1\n    div.appendChild(trim5)\n    \n    mod.motorvals[4] = inputslider5\n    mod.motordisp[4] = input5\n    mod.trimvals[4] = trim5\n    \n    input5.addEventListener('change', function(){\n        inputslider5.value = input5.value\n        if(mod.liveupdate){\n            outputs.output.event()\n            }\n        })\n    inputslider5.addEventListener('input', function(){\n        input5.value = inputslider5.value  \n        if(mod.liveupdate){\n            outputs.output.event()\n            }\n        })\n\n    div.appendChild(document.createElement('br'))\n    \n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('send'))\n      btn.addEventListener('click', \n            outputs.output.event)\n   div.appendChild(btn)  \n\n    div.appendChild(document.createElement('br'))\n    \n    div.appendChild(document.createTextNode('Top Motor Power: '))\n    toppowckbox = document.createElement('input')\n        toppowckbox.type = 'checkbox'\n        toppowckbox.checked = mod.toppow\n        toppowckbox.addEventListener('change', function(){\n            mod.toppow = toppowckbox.checked\n            outputs.output.event()\n            })\n    div.appendChild(toppowckbox)\n   div.appendChild(document.createElement('br'))\n   \n   div.appendChild(document.createTextNode('Bot Motor Power: '))\n    botpowckbox = document.createElement('input')\n        botpowckbox.type = 'checkbox'\n        botpowckbox.checked = mod.botpow\n        botpowckbox.addEventListener('change', function(){\n            mod.botpow = botpowckbox.checked\n           outputs.output.event()\n            })\n    div.appendChild(botpowckbox)\n   div.appendChild(document.createElement('br'))\n   \n   div.appendChild(document.createTextNode('Status Updates: '))\n    updatesckbox = document.createElement('input')\n        updatesckbox.type = 'checkbox'\n        updatesckbox.checked = mod.botpow\n        updatesckbox.addEventListener('change', function(){\n            mod.sync = updatesckbox.checked\n           outputs.output.event()\n            })\n    div.appendChild(updatesckbox)\n   div.appendChild(document.createElement('br'))\n   \n\n    \n\n   }\n\n\n\n//\n// local functions\n//\n   function togglePower(top){\n       mod.value = 'w'\n        if(top && mod.toppow){\n            mod.value = mod.value+'+'\n            //console.log('w+')\n        }\n        if(top && !mod.toppow){\n            mod.value = mod.value+'-'\n            console.log('w-')\n        }\n        if(!top && mod.botpow){\n            mod.value = mod.value+'='\n            console.log('w=')\n        }\n        if(!top && !mod.botpow){\n            mod.value = mod.value+'_'\n            console.log('w_')\n        }\n        \n        }\n        \n   function parseMotVals(){\n      mod.state.motorvals = [0,0,0,0,0]\n      for(i = 0; i < 5; i ++){\n         if(mod.motorvals[i].value > 255){\n            mod.state.motorvals[i] = 255\n            }\n         else{\n            mod.state.motorvals[i] = (parseInt(mod.motorvals[i].value)+parseInt(mod.trimvals[i].value))\n            }\n         \n        }\n   }\n\n   function openMOJO(){\n      mod.motorvals[0].value = 74\n      mod.motorvals[1].value =184\n      mod.motorvals[2].value = 74\n      mod.motorvals[3].value =184\n      mod.motorvals[4].value =180\n\n      mod.motordisp[0].value = 74\n      mod.motordisp[1].value =184\n      mod.motordisp[2].value = 74\n      mod.motordisp[3].value =184\n      mod.motordisp[4].value =180\n      parseMotVals()\n      outputs.output.event()\n   }\n\n   function closeMOJO(){\n      mod.motorvals[0].value = 30\n      mod.motorvals[1].value = 60\n      mod.motorvals[2].value = 30\n      mod.motorvals[3].value = 60\n      mod.motorvals[4].value =180\n\n      mod.motordisp[0].value = 30\n      mod.motordisp[1].value = 60\n      mod.motordisp[2].value = 30\n      mod.motordisp[3].value = 60\n      mod.motordisp[4].value =180\n      parseMotVals()\n      outputs.output.event()\n   }   \n   \n\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n\n\n","top":"83","left":"777","inputs":{},"outputs":{}},"0.6415368118610781":{"definition":"//\n// serial server module\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2016\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'WebSocket serial'\n//\n// initialization\n//\nvar init = function() {\n   mod.address.value = '127.0.0.1'\n   mod.port.value = 8989\n   mod.device = ''\n   mod.baud.value = 115200\n   mod.flow_rtscts.checked = false\n   mod.socket = null\n   }\n//\n// inputs\n//\nvar inputs = {\n   transmit:{type:'string',\n      event:function(evt){\n         serial_send_string(evt.detail)\n         }\n      },\n   file:{type:'object',\n      event:function(evt){\n         if (evt.detail.type == 'command') {\n            mod.command = evt.detail\n            socket_send(JSON.stringify(mod.command))\n            }\n         else if (evt.detail.type == 'file') {\n            mod.job = evt.detail\n            mod.job.type = 'file'\n            mod.label.nodeValue = 'send file'\n            mod.labelspan.style.fontWeight = 'bold'\n            }\n         }\n      }\n   }\n//\n// outputs\n//\nvar outputs = {\n   receive:{type:'string',\n      event:function(str){\n         mods.output(mod,'receive',str)\n         }\n      }\n   }\n//\n\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // server\n   //\n   div.appendChild(document.createTextNode('serialserver:'))\n   div.appendChild(document.createElement('br'))\n   //\n   // open/close\n   //\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('open'))\n      btn.addEventListener('click',function() {\n         socket_open()\n         })\n      div.appendChild(btn)\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('close'))\n      btn.addEventListener('click',function() {\n         socket_close()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // address\n   //\n   div.appendChild(document.createTextNode('address: '))\n   input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.address = input\n   div.appendChild(document.createElement('br'))\n   //\n   // port\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0port: '))\n   input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.port = input\n   div.appendChild(document.createElement('br'))\n   //\n   // status\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0status: '))\n   input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.status = input\n   div.appendChild(document.createElement('br'))\n   //\n   // serial\n   //\n   div.appendChild(document.createTextNode('serial device:'))\n   div.appendChild(document.createElement('br'))\n   //\n   // open/close\n   //\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('scan'))\n      btn.addEventListener('click',function() {\n         serial_scan()\n         })\n      div.appendChild(btn)\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('open'))\n      btn.addEventListener('click',function() {\n         serial_open()\n         })\n      div.appendChild(btn)\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('close'))\n      btn.addEventListener('click',function() {\n         serial_close()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   //\n   // device\n   //\n   div.appendChild(document.createTextNode('/dev/'))\n   mod.device = \"\"\n   var sel = document.createElement('select')\n   sel.style.padding = mods.ui.padding\n   sel.addEventListener(('change'),function(evt){\n      mod.device = evt.target.value\n      })\n   sel.style.width = \"100px\"\n   mod.portlist = sel\n   div.appendChild(mod.portlist)\n   div.appendChild(document.createElement('br'))   \n   //\n   // baud rate\n   //\n   div.appendChild(document.createTextNode('baud rate:'))\n   div.appendChild(document.createElement('br'))   \n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.baud = input\n   div.appendChild(document.createElement('br'))   \n   //\n   // flow control\n   //\n   div.appendChild(document.createTextNode('flow control:'))\n   div.appendChild(document.createElement('br'))   \n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'flow'\n      input.id = mod.div.id+'flow_none'\n      div.appendChild(input)\n      mod.flow_none = input\n   div.appendChild(document.createTextNode('none\\u00A0\\u00A0\\u00A0\\u00A0'))\n   div.appendChild(document.createElement('br'))   \n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'flow'\n      input.id = mod.div.id+'flow_rtscts'\n      div.appendChild(input)\n      mod.flow_rtscts = input\n   div.appendChild(document.createTextNode('RTSCTS'))\n   div.appendChild(document.createElement('br'))   \n   var input = document.createElement('input')\n      input.type = 'radio'\n      input.name = mod.div.id+'flow'\n      input.id = mod.div.id+'flow_dsrdtr'\n      div.appendChild(input)\n      input.disabled = true\n      mod.flow_dsrdtr = input\n   div.appendChild(document.createTextNode('DSRDTR'))\n   div.appendChild(document.createElement('br'))  \n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var span = document.createElement('span')\n         var text = document.createTextNode('scan')\n            mod.label = text\n            span.appendChild(text)\n         mod.labelspan = span\n      btn.appendChild(span)\n      btn.addEventListener('click',function(){\n         serial_scan();\n      })\n   div.appendChild(btn)\n   div.appendChild(document.createElement('br'))  \n   //\n   // file button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      var span = document.createElement('span')\n         var text = document.createTextNode('waiting for file')\n            mod.label = text\n            span.appendChild(text)\n         mod.labelspan = span\n         btn.appendChild(span)\n      btn.addEventListener('click',function(){\n         if (mod.socket == null) {\n            mod.status.value = \"can't send, not open\"\n            }\n         else if (mod.label.nodeValue == 'send file') {\n            socket_send(JSON.stringify(mod.job))\n            mod.label.nodeValue = 'cancel'\n            }\n         else if (mod.label.nodeValue == 'cancel') {\n            mod.command = {}\n            mod.command.type = 'cancel'\n            socket_send(JSON.stringify(mod.command))\n            }\n         })\n      div.appendChild(btn)\n   }\n//\n// local functions\n//\n\nfunction parseMessage(event){\n   //console.log(\"Received these data: \")\n   console.log(event)\n   if(\"data\" in event){\n        var message = {}\n        try {\n            message = JSON.parse(event.data)\n            }\n        catch(e){\n            console.log(\"JSON Parse of event data failed.\")\n            }\n        if(\"SerialPorts\" in message){\n            populate_portlist(message.SerialPorts)\n            }\n        if(!(\"Cmd\" in message)){\n            if(\"D\" in message){\n                outputs.receive.event(message.D)\n            }\n        }\n      }\n   }\n\nfunction socket_open() {\n   var url = \"ws://\"+mod.address.value+':'+mod.port.value+'/ws'\n   mod.socket = new WebSocket(url)\n   mod.socket.onopen = function(event) {\n      mod.status.value = \"socket opened\"\n      //serial_open()\n      }\n   mod.socket.onerror = function(event) {\n      mod.status.value = \"cannot open\"\n      mod.socket = null\n      }\n   mod.socket.onmessage = function(event){\n      parseMessage(event)\n      }\n   mod.socket.onclose = function(event) {\n      delete mod.socket;\n      }\n}\n\nfunction socket_close() {\n   mod.socket.close()\n   mod.status.value = \"socket closed\"\n   }\n\n\n/* \nfunction socket_send(msg) {\n   if (mod.socket != null) {\n      mod.status.value = \"send\"\n      mod.socket.send(msg)\n      }\n   else {\n      mod.status.value = \"can't send, not open\"\n      }\n   }\n*/\nfunction serial_open() {\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n       var msg = 'open '\n       msg = msg + mod.device + ' ' + mod.baud.value\n      mod.socket.send(msg)\n      }\n   }\nfunction serial_close() {\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n      var msg = 'close '+ mod.device\n      mod.socket.send(msg)\n      }\n   }\nfunction serial_send_string(str) {\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n       var msg = 'sendnobuf '\n       msg = msg + mod.device\n       msg = msg + \" \" + str\n       console.log(msg)\n       mod.socket.send(msg)\n      }\n   }\nfunction serial_scan(){\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n      mod.socket.send('list')\n   }\n}\n\nfunction populate_portlist(portlist){\n   mod.portlist.options.length = 0\n   for(port in portlist){\n      var opt = document.createElement('option')\n         opt.value = portlist[port].Name\n         opt.text = portlist[port].Name.substring(5)\n      mod.portlist.add(opt)   \n   }\n}\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"68","left":"1323","inputs":{},"outputs":{}},"0.3983146445701752":{"definition":"// MOJO Motor Control\n//\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {\n   curTopPos:-1,\n   curBotPos:-1,\n   curHipPos:-1,\n   posVals:{\n      or:[ 40,184], //outer retracted\n      oe:[ 40, 80], //outer extended\n      mr:[ 40,200], //mid retracted\n      me:[ 80,178], //mid extended\n      ir:[ 40,220], //inner retracted\n      ie:[190,220],  //inner extended\n      st:180,\n      bt:95\n   },\n   topPos:{},\n   botPos:{},\n   hipPos:{},\n   motorVals:[-1,-1,-1,-1,-1]\n}\n\n\n\n//\n// name\n//\nvar name = 'MOJO Position Control'\n//\n// initialization\n//\nvar init = function() {   \n    \n    }\n    \n//\n// inputs\n//\nvar inputs = {\n   }\n//\n// outputs\n//\nvar outputs = {\n   motorVals:{\n      type:'MOJOState',\n      event:function(){\n           var out = {}\n           out.motorvals = mod.motorVals\n           mods.output(mod,'motorVals',JSON.stringify(out))\n           }\n      }\n}\n//\n// interface\n//\n\n\nvar interface = function(div){\n   mod.div = div///*\n\n   div.appendChild(document.createTextNode('Top: '))\n      var toptable = document.createElement('table')\n         var tr = document.createElement('tr')\n            var ttdor = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('or'))\n                  btn.addEventListener('click', function(event){\n                        goTopMOJO('or')})\n            ttdor.appendChild(btn)\n            mod.topPos.or = ttdor\n         tr.appendChild(ttdor)\n            ttdoe = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('oe'))\n                  btn.addEventListener('click', function(event){\n                        goTopMOJO('oe')})\n            ttdoe.appendChild(btn)\n            mod.topPos.oe = ttdoe\n         tr.appendChild(ttdoe)\n      toptable.appendChild(tr)\n         var tr = document.createElement('tr')\n            var ttdmr = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('mr'))\n                  btn.addEventListener('click', function(event){\n                        goTopMOJO('mr')})\n            ttdmr.appendChild(btn)\n            mod.topPos.mr = ttdmr\n         tr.appendChild(ttdmr)\n            ttdme = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('me'))\n                  btn.addEventListener('click', function(event){\n                        goTopMOJO('me')})\n            ttdme.appendChild(btn)\n            mod.topPos.me = ttdme\n         tr.appendChild(ttdme)\n      toptable.appendChild(tr)\n         var tr = document.createElement('tr')\n            var ttdir = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('ir'))\n                  btn.addEventListener('click',function(event){\n                        goTopMOJO('ir')})\n            ttdir.appendChild(btn)\n            mod.topPos.ir = ttdir\n         tr.appendChild(ttdir)\n            ttdie = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('ie'))\n                  btn.addEventListener('click', function(event){\n                        goTopMOJO('ie')})\n            ttdie.appendChild(btn)\n            mod.topPos.ie = ttdie\n         tr.appendChild(ttdie)\n      toptable.appendChild(tr)\n   div.appendChild(toptable)\n\n   div.appendChild(document.createElement('br'))\n   \n   div.appendChild(document.createTextNode('Hip: '))\n   \n   \n      var toptable = document.createElement('table')\n         var tr = document.createElement('tr')\n            var htdst = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('straight'))\n                  btn.addEventListener('click', function(event){  \n                     goHipMOJO('st')\n                  })\n            htdst.appendChild(btn)\n            mod.hipPos.st = htdst\n         tr.appendChild(htdst)\n            var htdbt = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('bent'))\n                  btn.addEventListener('click', function(event){  \n                     goHipMOJO('bt')\n                  })\n            htdbt.appendChild(btn)\n            mod.hipPos.bt = htdbt\n         tr.appendChild(htdbt)\n      toptable.appendChild(tr)\n   div.appendChild(toptable)\n   \n   div.appendChild(document.createTextNode('Bot: '))\n      var toptable = document.createElement('table')\n         var tr = document.createElement('tr')\n            var btdir = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('ir'))\n                  btn.addEventListener('click', function(event){\n                        goBotMOJO('ir')})\n            btdir.appendChild(btn)\n            mod.botPos.ir = btdir\n         tr.appendChild(btdir)\n            btdie = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('ie'))\n                  btn.addEventListener('click', function(event){\n                        goBotMOJO('ie')})\n            btdie.appendChild(btn)\n            mod.botPos.ie = btdie\n         tr.appendChild(btdie)\n      toptable.appendChild(tr)\n         var tr = document.createElement('tr')\n            var btdmr = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('mr'))\n                  btn.addEventListener('click', function(event){\n                        goBotMOJO('mr')})\n            btdmr.appendChild(btn)\n            mod.botPos.mr = btdmr\n         tr.appendChild(btdmr)\n            btdme = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('me'))\n                  btn.addEventListener('click', function(event){\n                        goBotMOJO('me')})\n            btdme.appendChild(btn)\n            mod.botPos.me = btdme\n         tr.appendChild(btdme)\n      toptable.appendChild(tr)\n         var tr = document.createElement('tr')\n            var btdor = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('or'))\n                  btn.addEventListener('click',function(event){\n                        goBotMOJO('or')})\n            btdor.appendChild(btn)\n            mod.botPos.or = btdor\n         tr.appendChild(btdor)\n            btdoe = document.createElement('td')\n               var btn = document.createElement('button')\n                  btn.style.margin = 1\n                  btn.appendChild(document.createTextNode('oe'))\n                  btn.addEventListener('click', function(event){\n                        goBotMOJO('oe')})\n            btdoe.appendChild(btn)\n            mod.botPos.oe = btdoe\n         tr.appendChild(btdoe)\n      toptable.appendChild(tr)\n   div.appendChild(toptable)\n\n   div.appendChild(document.createElement('br'))\n\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('send state'))\n      btn.addEventListener('click', function(event){  \n         goCurMOJO()\n         outputs.motorVals.event()\n      })\n   div.appendChild(btn)  \n   }\n\n//\n// local functions\n//\n\n   function goCurMOJO(){\n      if(mod.curTopPos != -1){\n         mod.motorVals[0] = mod.posVals[mod.curTopPos][0]\n         mod.motorVals[1] = mod.posVals[mod.curTopPos][1]\n         }\n      if(mod.curBotPos != -1){\n         mod.motorVals[2] = mod.posVals[mod.curBotPos][0]\n         mod.motorVals[3] = mod.posVals[mod.curBotPos][1]\n         }\n      if(mod.curHipPos != -1){\n         mod.motorVals[4] = mod.posVals[mod.curHipPos]\n         }\n   }\n   function goTopMOJO(val){\n      mod.motorVals[0] = mod.posVals[val][0]\n      mod.motorVals[1] = mod.posVals[val][1]\n      mod.motorVals[2] = -1\n      mod.motorVals[3] = -1\n      mod.motorVals[4] = -1\n      if(mod.curTopPos != -1)\n        mod.topPos[mod.curTopPos].style.backgroundColor = 'transparent'\n      mod.topPos[val].style.backgroundColor = 'red'\n      mod.curTopPos = val\n      outputs.motorVals.event()\n   }\n\n   function goBotMOJO(val){\n      mod.motorVals[2] = mod.posVals[val][0]\n      mod.motorVals[3] = mod.posVals[val][1]\n      mod.motorVals[0] = -1\n      mod.motorVals[1] = -1\n      mod.motorVals[4] = -1\n      if(mod.curBotPos != -1)\n        mod.botPos[mod.curBotPos].style.backgroundColor = 'transparent'\n      mod.botPos[val].style.backgroundColor = 'red'\n      mod.curBotPos = val\n      outputs.motorVals.event()\n   }\n   \n   function goHipMOJO(val){\n      mod.motorVals[4] = mod.posVals[val]\n      mod.motorVals[0] = -1\n      mod.motorVals[1] = -1\n      mod.motorVals[2] = -1\n      mod.motorVals[3] = -1\n      if(mod.curHipPos != -1)\n         mod.hipPos[mod.curHipPos].style.backgroundColor = 'transparent'\n      mod.hipPos[val].style.backgroundColor = 'red'\n      mod.curHipPos = val\n      outputs.motorVals.event()\n   }\n\n\n   \n\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n\n\n","top":"101","left":"80","inputs":{},"outputs":{}},"0.91073292481836":{"definition":"//\n// Chart Display\n// Takes a datastream in, outputs a chart\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n\n(function(){\n//\n// module globals\n//\nvar mod = {\n  counter: 0,\n  data:[\n          ['Time', 'Arm A', 'Arm B']\n       ],\n  options:{\n            title: 'Current Draw',\n            hAxis: {title: 'Time', minValue: 0, maxValue: 100},\n            vAxis: {title: 'MotorVal', viewWindowMode:'explicit',\n    viewWindow: {\n        max:255,\n        min:0\n    }},\n            legend: 'none'\n          },\n    armAVals : [ 1.47392e-6,-0.000323327,  0.0132563, -0.863413,213.412],\n    armBVals : [-1.3228e-6, 0.000239373, -0.00304926, -2.07789 ,174.47],\n    tval : 0,\n    canvas : null,\n    ctx: null,\n    increment: 5\n}\n\nvar input\n//\n// name\n//\nvar name = 'MOJO Arm Control Test'\n//\n// initialization\n//\nvar init = function() {\n}\n\n//\n// inputs\n//\nvar inputs = {\n  data:{\n    type:'data',\n    event:function(evt){\n      console.log(evt)\n        outarr = [mod.counter]\n        evt.detail.forEach(function(entry){\n          outarr.push(parseInt(entry))\n        })\n       mod.data.push(outarr)\n       mod.counter++\n       plotChart()\n       outputs.output.event()\n       }\n    },\n  options:{\n    type:'str',\n    event:function(evt){\n\n      }\n    } \n  }\n\n//\n// outputs\n//\nvar outputs = {\n   output:{type:'string',\n      event:function(){\n          var out = {}\n          out.motorvals = [parseInt(mod.data[mod.tval][2]), parseInt(mod.data[mod.tval][1]),-1,-1,-1]\n         mods.output(mod,'output',JSON.stringify(out))}}}\n//\n// interface\n//\n\nvar interface = function(div){\n  mod.div = div\n  \n  mod.canvas = document.createElement('canvas')\n    mod.canvas.width =500\n    mod.canvas.height =300\n    mod.canvas.style.backgroundColor = 'rgb(255,255,255)'\n    div.appendChild(mod.canvas)\n\n    mod.ctx = mod.canvas.getContext('2d')\n    \n    //\n    // LINE BREAK\n    //\n    div.appendChild(document.createElement('br'))\n\n    input_t4a = document.createElement('input')\n        input_t4a.type = 'text'\n        input_t4a.value = mod.armAVals[0]\n        input_t4a.size = 1\n    input_t4a.addEventListener('change', function(){\n        mod.armAVals[0] = parseFloat(input_t4a.value)\n        updateChartData()\n        })\n    div.appendChild(input_t4a)\n    \n    div.appendChild(document.createTextNode('t^4 + '))\n    \n    input_t3a = document.createElement('input')\n        input_t3a.type = 'text'\n        input_t3a.value = mod.armAVals[1]\n        input_t3a.size = 1\n    input_t3a.addEventListener('change', function(){\n        mod.armAVals[1] = parseFloat(input_t3a.value)\n        updateChartData()\n        })\n    div.appendChild(input_t3a)\n    \n    div.appendChild(document.createTextNode('t^3 + '))\n    \n    input_t2a = document.createElement('input')\n        input_t2a.type = 'text'\n        input_t2a.value = mod.armAVals[2]\n        input_t2a.size = 1\n    input_t2a.addEventListener('change', function(){\n        mod.armAVals[2] = parseFloat(input_t2a.value)\n        updateChartData()\n        })\n    div.appendChild(input_t2a)\n    \n    div.appendChild(document.createTextNode('t^2 + '))\n    \n    input_t1a = document.createElement('input')\n        input_t1a.type = 'text'\n        input_t1a.value = mod.armAVals[3]\n        input_t1a.size = 1\n    input_t1a.addEventListener('change', function(){\n        mod.armAVals[3] = parseFloat(input_t1a.value)\n        updateChartData()\n        })\n\n    div.appendChild(input_t1a)\n    \n    div.appendChild(document.createTextNode('t^1 + '))\n    \n    input_t0a = document.createElement('input')\n        input_t0a.type = 'text'\n        input_t0a.value = mod.armAVals[4]\n        input_t0a.size = 1\n    input_t0a.addEventListener('change', function(){\n        mod.armAVals[4] = parseFloat(input_t0a.value)\n        updateChartData()\n        })\n \n    div.appendChild(input_t0a)\n    \n    //\n    // LINE BREAK\n    //\n    div.appendChild(document.createElement('br'))\n    \n    //\n    // New Set of inputs (B arm)\n    //\n        input_t4b = document.createElement('input')\n        input_t4b.type = 'text'\n        input_t4b.value = mod.armBVals[0]\n        input_t4b.size = 1\n    input_t4b.addEventListener('change', function(){\n        mod.armBVals[0] = parseFloat(input_t4b.value)\n        updateChartData()\n        })\n    div.appendChild(input_t4b)\n    \n    div.appendChild(document.createTextNode('t^4 + '))\n    \n    input_t3b = document.createElement('input')\n        input_t3b.type = 'text'\n        input_t3b.value = mod.armBVals[1]\n        input_t3b.size = 1\n    input_t3b.addEventListener('change', function(){\n        mod.armBVals[1] = parseFloat(input_t3b.value)\n        updateChartData()\n        })\n    div.appendChild(input_t3b)\n    \n    div.appendChild(document.createTextNode('t^3 + '))\n    \n    input_t2b = document.createElement('input')\n        input_t2b.type = 'text'\n        input_t2b.value = mod.armBVals[2]\n        input_t2b.size = 1\n    input_t2b.addEventListener('change', function(){\n        mod.armBVals[2] = parseFloat(input_t2b.value)\n        updateChartData()\n        })\n    div.appendChild(input_t2b)\n    \n    div.appendChild(document.createTextNode('t^2 + '))\n    \n    input_t1b = document.createElement('input')\n        input_t1b.type = 'text'\n        input_t1b.value = mod.armBVals[3]\n        input_t1b.size = 1\n    input_t1b.addEventListener('change', function(){\n        mod.armBVals[3] = parseFloat(input_t1b.value)\n        updateChartData()\n        })\n    div.appendChild(input_t1b)\n    \n    div.appendChild(document.createTextNode('t^1 + '))\n    \n    input_t0b = document.createElement('input')\n        input_t0b.type = 'text'\n        input_t0b.value = mod.armBVals[4]\n        input_t0b.size = 1\n    input_t0b.addEventListener('change', function(){\n        mod.armBVals[4] = parseFloat(input_t0b.value)\n        updateChartData()\n        })\n\n    div.appendChild(input_t0b)\n    \n    //\n    // LINE BREAK\n    //\n    div.appendChild(document.createElement('br'))\n    \n  var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('update'))\n      btn.addEventListener('click',updateChartData)\n      div.appendChild(btn)  \n    \n    var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('go'))\n      btn.addEventListener('click',function(){\n          mod.incrementing = true\n          increment()\n      })\n      div.appendChild(btn)\n  }\n\nfunction plotChart(){\n    \n    mod.ctx.clearRect(0,0,mod.canvas.width,mod.canvas.height)\n    mod.ctx.beginPath()\n    mod.ctx.moveTo(10,mod.canvas.height-armA(0))\n    for(var t = 0; t < 100; t++){\n        mod.ctx.lineTo(t*(mod.canvas.width-20)/100.0+10,mod.canvas.height-mod.data[t][1])\n    }\n    mod.ctx.strokeStyle=\"red\";\n    mod.ctx.stroke()\n    \n    mod.ctx.moveTo(10,mod.canvas.height-armB(0))\n    mod.ctx.beginPath()\n    for(var t = 0; t < 100; t++){\n        mod.ctx.lineTo(t*(mod.canvas.width-20)/100.0+10,mod.canvas.height-mod.data[t][2])\n    }\n    mod.ctx.strokeStyle=\"blue\";\n    mod.ctx.stroke()\n    \n    \n    mod.ctx.moveTo(mod.tval*(mod.canvas.width-20)/100.0+10,mod.canvas.height)\n    mod.ctx.beginPath()\n        mod.ctx.lineTo(mod.tval*(mod.canvas.width-20)/100.0+10,mod.canvas.height)\n        mod.ctx.lineTo(mod.tval*(mod.canvas.width-20)/100.0+10,0)\n    mod.ctx.strokeStyle=\"black\";\n    mod.ctx.stroke()\n    \n    \n  }\nfunction increment(){\n    mod.tval = mod.tval + mod.increment\n    if(mod.tval > 99){\n        mod.incrementing = false\n        mod.tval = 99\n        mod.increment = -5\n    }\n    if(mod.tval < 0){\n        mod.incrementing = false\n        mod.tval = 0\n        mod.increment = 5\n    }\n    plotChart()\n    outputs.output.event()\n    \n    if(mod.incrementing)\n        setTimeout(increment,100)\n        \n        \n}\nfunction updateChartData(){\n    mod.data = []\n    \n    for(var t = 0; t < 100; t++){\n        mod.data.push([t,armA(t),armB(t)])\n    }\n    \n    \n    plotChart()\n}\n\nfunction armA(tval){\n    var total = 0;\n    for(var i = 4; i >= 0; i--){\n        total = total + Math.pow(tval,i)*mod.armAVals[4-i]\n    }\n    return total\n}\n\nfunction armB(tval){\n    var total = 0;\n    for(var i = 4; i >= 0; i--){\n        total = total + Math.pow(tval,i)*mod.armBVals[4-i]\n    }\n    return total\n}\n\n//\n// return values\n//\nreturn ({\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"498","left":"180","inputs":{},"outputs":{}}},"links":["{\"source\":\"{\\\"id\\\":\\\"0.038164121193438594\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"output\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.6415368118610781\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"transmit\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.3983146445701752\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"motorVals\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.038164121193438594\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"motorVals\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.91073292481836\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"output\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.038164121193438594\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"motorVals\\\"}\"}"]}